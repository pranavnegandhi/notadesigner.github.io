<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<meta name="description" content="Pranav Negandhi writes about programming in ActionScript and C#." />
<title>fitnet | Not a Designer</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="pingback" href="http://localhost:81/wp/xmlrpc.php" />

<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="Not a Designer &raquo; Feed" href="http://localhost:81/wp/feed/" />
<link rel="alternate" type="application/rss+xml" title="Not a Designer &raquo; Comments Feed" href="http://localhost:81/wp/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Not a Designer &raquo; fitnet Tag Feed" href="http://localhost:81/wp/tag/fitnet/feed/" />
<link rel='stylesheet' id='wp-block-library-css'  href='http://localhost:81/wp/wp-includes/css/dist/block-library/style.min.css?ver=5.6.1' type='text/css' media='all' />
<link rel='stylesheet' id='aldus-style-css'  href='http://localhost:81/wp/wp-content/themes/aldus/style.css?ver=20130728' type='text/css' media='all' />
<link rel='stylesheet' id='aldus-fonts-css'  href='http://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic&#038;subset=latin' type='text/css' media='all' />
<link rel='stylesheet' id='easy_table_style-css'  href='http://localhost:81/wp/wp-content/plugins/easy-table/themes/cuscosky/style.css?ver=1.8' type='text/css' media='all' />
<link rel="https://api.w.org/" href="http://localhost:81/wp/wp-json/" /><link rel="alternate" type="application/json" href="http://localhost:81/wp/wp-json/wp/v2/tags/46" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://localhost:81/wp/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 5.6.1" />

<!-- WP-SWFObject 2.4 by unijimpe -->
<script src="http://localhost:81/wp/wp-content/plugins/wp-swfobject/2.0/swfobject.js" type="text/javascript"></script>
</head>

<body class="archive tag tag-fitnet tag-46">
<div id="page" class="hfeed site">
		<header id="masthead" class="site-header" role="banner">
		<div class="site-branding">
			<h1 class="site-title"><a href="http://localhost:81/wp/" title="Not a Designer" rel="home">Not a Designer</a></h1>
			<h2 class="site-description"></h2>
		</div>

		<nav id="site-navigation" class="navigation-main" role="navigation">
			<h1 class="menu-toggle">Menu</h1>
			<div class="screen-reader-text skip-link"><a href="#content" title="Skip to content">Skip to content</a></div>

			<div class="menu-basic-menu-container"><ul id="menu-basic-menu" class="menu"><li id="menu-item-1256" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1256"><a>Favourites</a>
<ul class="sub-menu">
	<li id="menu-item-1268" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1268"><a>Foundation</a>
	<ul class="sub-menu">
		<li id="menu-item-1269" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1269"><a href="http://localhost:81/wp/on-reading-for-programmers/">On Reading for Programmers</a></li>
		<li id="menu-item-1270" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1270"><a href="http://localhost:81/wp/programming-beyond-9-to-5/">Programming Beyond 9 to 5</a></li>
		<li id="menu-item-1271" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1271"><a href="http://localhost:81/wp/whats-in-a-name/">What&#8217;s in a Name?</a></li>
		<li id="menu-item-1272" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1272"><a href="http://localhost:81/wp/nothing-is-so-simple-that-it-cannot-be-difficult/">Nothing Is So Simple That it Cannot Be Difficult</a></li>
		<li id="menu-item-1273" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1273"><a href="http://localhost:81/wp/a-guide-to-effective-version-control/">A Guide to Effective Version Control</a></li>
	</ul>
</li>
	<li id="menu-item-1263" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1263"><a>Demonstration</a>
	<ul class="sub-menu">
		<li id="menu-item-1265" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1265"><a href="http://localhost:81/wp/reading-time-on-a-binary-clock/">Reading Time on a Binary Clock</a></li>
		<li id="menu-item-1264" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1264"><a href="http://localhost:81/wp/a-binary-clock-using-c/">A Binary Clock using C#</a></li>
		<li id="menu-item-1266" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1266"><a href="http://localhost:81/wp/creating-an-underwater-effect-in-actionscript/">Creating an Underwater Effect in ActionScript</a></li>
		<li id="menu-item-1267" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1267"><a href="http://localhost:81/wp/breaking-free-from-your-api/">Breaking Free from Your API</a></li>
	</ul>
</li>
	<li id="menu-item-1262" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1262"><a>Technique</a>
	<ul class="sub-menu">
		<li id="menu-item-1258" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1258"><a href="http://localhost:81/wp/how-to-write-unmaintainable-code-php-redux/">How to Write Unmaintainable Code – PHP Redux</a></li>
		<li id="menu-item-1257" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1257"><a href="http://localhost:81/wp/how-to-write-unmaintainable-code-asp-net-redux/">How to Write Unmaintainable Code – ASP.NET Redux</a></li>
		<li id="menu-item-1259" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1259"><a href="http://localhost:81/wp/a-message-in-a-socket-interprocess-communications-by-example/">A Message in a Socket – Interprocess Communications by Example</a></li>
		<li id="menu-item-1260" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1260"><a href="http://localhost:81/wp/socket-talk-interprocess-communications-by-example/">Socket Talk – Interprocess Communications by Example</a></li>
		<li id="menu-item-1261" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1261"><a href="http://localhost:81/wp/reifying-your-commands-interprocess-communications-by-example/">Reifying Your Commands – Interprocess Communications by Example</a></li>
	</ul>
</li>
</ul>
</li>
<li id="menu-item-1437" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1437"><a>Practical Design Patterns</a>
<ul class="sub-menu">
	<li id="menu-item-1442" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1442"><a href="http://localhost:81/wp/practical-design-patterns-in-c-factory-method/">Factory Method</a></li>
	<li id="menu-item-1441" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1441"><a href="http://localhost:81/wp/practical-design-patterns-in-c-abstract-factory/">Abstract Factory</a></li>
	<li id="menu-item-1440" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1440"><a href="http://localhost:81/wp/practical-design-patterns-in-c-builder/">Builder</a></li>
	<li id="menu-item-1439" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1439"><a href="http://localhost:81/wp/practical-design-patterns-in-c-prototype/">Prototype</a></li>
	<li id="menu-item-1438" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1438"><a href="http://localhost:81/wp/practical-design-patterns-in-c-singleton/">Singleton</a></li>
</ul>
</li>
<li id="menu-item-965" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-965"><a href="http://localhost:81/wp/about/">About Pranav Negandhi</a></li>
</ul></div>		</nav><!-- #site-navigation -->
	</header><!-- #masthead -->

	<div id="main" class="site-main">

	<section id="primary" class="content-area">
		<div id="content" class="site-content" role="main">

		
			<header class="page-header">
				<h1 class="page-title">
					fitnet				</h1>
							</header><!-- .page-header -->

						
				
<article id="post-1597" class="post-1597 post type-post status-publish format-standard hentry category-construction category-software-engineering tag-asp-net-mvc tag-c tag-fitnet">
	<header class="entry-header">
		<h1 class="entry-title"><a href="http://localhost:81/wp/valknut-json-serialization/" rel="bookmark">Valknut &#8211; JSON Serialization</a></h1>
	</header><!-- .entry-header -->

		<div class="entry-content">
		
<p>Many service responses are returned as JSON objects. For this, the application must implement some basic configuration and error handling in each method. By utilising the cross-cutting facet of attributes, this code is unified into a common location and applied wherever required.</p>



<h3>Signalling</h3>



<p>Firstly, the action method that returns JSON has to be marked. The JsonHandlerAttribute class inherits from ActionFilterAttribute. It is applied to the method in question. When the method is invoked, the ASP.NET pipeline executes the <code>OnActionExecuted</code> method on its attribute. The method converts the <code>System.Web.Mvc.JsonResult</code> result into a custom-written class called <code>FitNet.Web.Infrastructure.JsonNetResult</code>. This class inherits from <code>JsonResult</code> and adds some shared functionality.</p>



<h3>Error Handling and Serialization</h3>



<p>The conversion from <code>JsonResult</code> to <code>JsonNetResult</code> is performed inside the <code>JsonHandlerAttribute</code> class. The <code>Result</code> property of the current filter context is typed into <code>JsonNetResult</code>. If the conversion is successful, then a new instance of <code>JsonNetResult</code> is created and the copies of the current result copied over.</p>



<p>Finally, the <code>ExecuteResult</code> method is invoked on the newly created result instance. This step performs the following error checks.</p>



<ol><li>Deny GET requests by default, unless it is explicitly allowed in the method.</li><li>Set the content type of the response to <code>application/json</code>.</li><li>Configure the underlying serializer to throw an error in case of looping references.</li></ol>



<p>If all the checks pass, then the response data is serialized and the output is assigned to the <code>Output</code> property of the current response.</p>



<p>This structure of the code removes the need to have all these checks in each method that has to return a JSON response.</p>
			</div><!-- .entry-content -->
	
	<footer class="entry-meta">
			<div class="entry-meta-date-links">
		<time class="date" datetime="2020-09-08T10:42:29+05:30">September 8, 2020</time>
				<span class="sep"> &#8226; </span>
		<span class="permalink"><a href="http://localhost:81/wp/valknut-json-serialization/" rel="bookmark">&#8734;</a></span>
			</div>

	
		
	</footer><!-- .entry-meta -->
</article><!-- #post-## -->

			
				
<article id="post-1594" class="post-1594 post type-post status-publish format-standard hentry category-construction category-software-engineering tag-asp-net-mvc tag-c tag-fitnet">
	<header class="entry-header">
		<h1 class="entry-title"><a href="http://localhost:81/wp/valknut-view-models/" rel="bookmark">Valknut &#8211; View Models</a></h1>
	</header><!-- .entry-header -->

		<div class="entry-content">
		
<p>The application utilises view models heavily for all kinds of client-side communication. A page view model is an obvious candidate. But even JSON requests and responses are deserialised into a view model for better server-side manipulation.</p>



<h3>Core Hierarchy</h3>



<p>The application view model architecture is highly formalised. It follows a strong hierarchy for transmitting the various kinds of data models to the client and back. The base of this entire hierachy is the class <code>FitNet.Web.ViewModels.EntityViewModel</code>. This class exposes the properties <code>Id</code> and <code>Name</code>.</p>



<p>All entity view models which are used to enumerate records, show editable forms or delete rows inherit from <code>EntityViewModel</code>. This offers the structure required to perform common sets of actions on these entities irrespective of their individual types and properties.</p>



<h3>Page View Model</h3>



<p>This is a generic class that is designed for transmitting data for a standard HTML output. It has a single generic type parameter that has to inherit from the <code>EntityViewModel</code>. This class exposes the properties <code>Title</code>, <code>Permalink</code> and <code>Entity</code>. The type of <code>Entity</code> matches the type of the generic parameter.</p>



<p>All entity controllers can use this class to generate an editor page with a shared set of page properties and layout hosting a form with entity type-specific fields.</p>



<h3>DataTables View Models</h3>



<p>DataTables is a popular jQuery plugin for rendering grids on the client-side. It supports dynamic retrieval of data, page-wise splitting, record offsets and many other features required for viewing collections.</p>



<p>This library is utilised heavily in Valknut, and as a result, the back-end provides built-in view models for data retrieval and submission directly through DataTables.</p>



<p>The classes required for this feature are listed below.</p>



<ul><li>FitNet.Web.ViewModels.DataTables.RequestViewModel</li><li>FitNet.Web.ViewModels.DataTables.ColumnViewModel</li><li>FitNet.Web.ViewModels.DataTables.OrderViewModel</li><li>FitNet.Web.ViewModels.DataTables.SearchViewModel</li><li>FitNet.Web.ViewModels.DataTables.ResponseViewModel</li></ul>



<h4>Request View Models</h4>



<p>This is a composite class that organises several other view models into a single instance. When the plugin makes an AJAX request, the request is serialised into this type. It&#8217;s native properties are <code>Draw</code>, <code>Start</code>, <code>Length</code> and <code>Error</code>. These properties are required for cache-busting, record navigation and error handling.</p>



<p>The <code>Search</code> property contains an instance of the <code>SearchViewModel</code>, while <code>Columns</code> and <code>Order</code> are collections of type <code>ColumnViewModel</code> and <code>OrderViewModel</code> respectively.</p>



<h5>Server-side Processing</h5>



<p>An AJAX request from a DataTables instance can be processed on the client-side or on the server. In the former scenario, all data is retrieved in a single network operation and stored in memory on the client. This is convenient and quick for small data sets.</p>



<p>But if your data sets are large or contain an indefinite number of rows, server-side processing is more efficient. For this, the plugin sends some additional information with each request.</p>



<ol><li>Column Data</li><li>Column Name</li><li>Column Searchable</li><li>Column Orderable</li><li>Column Search Value</li><li>Column Search RegEx</li><li>Column to Order By</li><li>Direction of Ordering</li><li>Record Number to Start At</li><li>Length of Data Set</li><li>Global Search Value</li><li>Global Search RegEx</li></ol>



<p>Column and ordering parameters are an indexed collection. The entire request is URL encoded. An example of the body sent is shown below (with the request split into multiple lines for legibility).</p>


<pre class="brush: plain; title: ; notranslate" title="">
draw=1&amp;amp;
columns[0][data]=Name&amp;amp;
columns[0][name]=&amp;amp;
columns[0][searchable]=true&amp;amp;
columns[0][orderable]=true&amp;amp;
columns[0][search][value]=&amp;amp;
columns[0][search][regex]=false&amp;amp;
columns[1][data]=Id&amp;amp;
columns[1][name]=&amp;amp;
columns[1][searchable]=true&amp;amp;
columns[1][orderable]=false&amp;amp;
columns[1][search][value]=&amp;amp;
columns[1][search][regex]=false&amp;amp;
order[0][column]=0&amp;amp;
order[0][dir]=asc&amp;amp;
start=0&amp;amp;
length=10&amp;amp;
search[value]=&amp;amp;
search[regex]=false
</pre>


<h4><a href="https://github.com/pranavnegandhi/notadesigner.github.io/blob/master/view-models.md#column-view-model"></a>Column View Model</h4>



<p>The column fields are deserialised into an instance of this class. Each column has its own instance, and each instance has the properties <code>Data</code>, <code>Name</code>, <code>Searchable</code>, <code>Orderable</code>, <code>Start</code>, <code>Length</code>, as well as a nested instance of the search view model.</p>



<p>The server can utilise these values to perform any additional ordering or filtering on the result data set before dispatching it back to the client.</p>



<h4>Order View Model</h4>



<p>This is a very simple class consisting of only two properties – <code>Column</code> and <code>Direction</code>. The first is the index of the primary sorting column, and the second is a string containing the value <code>asc</code> or <code>desc</code>.</p>



<p>The server can utilise these properties to sort the data on the server.</p>



<h4>Search View Model</h4>



<p>This class contains the properties <code>Value</code> and <code>RegEx</code>, which is used to transmit keywords or regular expressions to the server. The data set can be filtered against these parameters before returning it to the client.</p>



<h4>Response View Model</h4>



<p>In addition to the collection of records, the DataTables instance also requires some additional information such as the current page number. This view model implements properties for these values.</p>



<p>The complete list of properties are <code>Draw</code>, <code>Start</code>, <code>RecordsFiltered</code>, <code>RecordsTotal</code>, <code>Search</code>, <code>Error</code> and <code>Data</code>. The last one is an <code>ICollection</code> instance and contains the rows to be rendered.</p>
			</div><!-- .entry-content -->
	
	<footer class="entry-meta">
			<div class="entry-meta-date-links">
		<time class="date" datetime="2020-09-05T18:39:46+05:30">September 5, 2020</time>
				<span class="sep"> &#8226; </span>
		<span class="permalink"><a href="http://localhost:81/wp/valknut-view-models/" rel="bookmark">&#8734;</a></span>
			</div>

	
		
	</footer><!-- .entry-meta -->
</article><!-- #post-## -->

			
				
<article id="post-1590" class="post-1590 post type-post status-publish format-standard hentry category-construction category-software-engineering tag-asp-net-mvc tag-c tag-fitnet">
	<header class="entry-header">
		<h1 class="entry-title"><a href="http://localhost:81/wp/valknut-validation/" rel="bookmark">Valknut &#8211; Validation</a></h1>
	</header><!-- .entry-header -->

		<div class="entry-content">
		
<h3>Introduction</h3>



<p>ASP.NET MVC has always had a robust request validation model that is easily harnessed. The model in question has to be decorated with validation attributes from a broad collection of possibilities, and the framework takes care of ensuring compliance and distilling it into a single boolean that can be referenced from <code>ModelState.IsValid</code>.</p>



<p>Nothing could be easier.</p>



<p>However, this approach requires that the programmer must remember to write the code to perform a validation check in each action method. This is tedious and error-prone, and results in duplicated code.</p>



<p>It is possible to implement this functionality in a more modular fashion by implementing it as a filter attribute and plugging it into the ASP.NET request pipeline.</p>



<h3>Passive Attributes</h3>



<p>Before we go into the implementation of the filter itself, there is a slight design idiosyncracy that has to be understood. Request filtering through a class that derives from <code>ActionFilterAttribute</code> is a common enough pattern. A request is filtered through this attribute if the method implementing its corresponding action is decorated with this attribute. But this approach imposes various technical restrictions and design compromises.</p>



<p>A more robust approach is to decorate the action method with a non-behavioural attribute that derives from <code>Attribute</code>, and adding the filter directly into the global filter collection.</p>



<p>Passive attributes are described by Mark Seemann at the link below.</p>



<p><a href="https://blog.ploeh.dk/2014/06/13/passive-attributes/">Passive Attributes</a></p>



<h3>Implementation</h3>



<p>The passive attribute approach results in an attribute class called <code>ValidateModelAttribute</code>. Any method that requires model validation can be decorated with this attribute.</p>


<pre class="brush: plain; title: ; notranslate" title="">
[HttpPost]
[ValidateModel]
public ActionResult Edit(PageViewModel&lt;ExerciseEditViewModel&gt; viewModel)
</pre>


<p>A <code>RequestValidateModelFilter</code> class implements the <code>IActionFilter</code> interface and is added into the global filters collection during the <code>Application_Start</code> event. When an incoming request arrives, it is passed through the <code>RequestValidateModelFilter</code> instance, which checks if the request requires validation, and if so, checks if the <code>IsValid</code> property of the model state is true.</p>



<p>If the model state is not valid, then the request pipeline is truncated and all validation errors are gathered into a JSON response. The application returns a HTTP status code 400 along with the list of errors in the body of the response.</p>
			</div><!-- .entry-content -->
	
	<footer class="entry-meta">
			<div class="entry-meta-date-links">
		<time class="date" datetime="2020-09-04T07:43:48+05:30">September 4, 2020</time>
				<span class="sep"> &#8226; </span>
		<span class="permalink"><a href="http://localhost:81/wp/valknut-validation/" rel="bookmark">&#8734;</a></span>
			</div>

	
		
	</footer><!-- .entry-meta -->
</article><!-- #post-## -->

			
				
<article id="post-1586" class="post-1586 post type-post status-publish format-standard hentry category-construction category-software-engineering tag-asp-net-mvc tag-c tag-fitnet">
	<header class="entry-header">
		<h1 class="entry-title"><a href="http://localhost:81/wp/valknut-localisation/" rel="bookmark">Valknut &#8211; Localisation</a></h1>
	</header><!-- .entry-header -->

		<div class="entry-content">
		
<h3>Client-specific Regional Settings</h3>



<h4>Request Structure</h4>



<p>Valknut implements localisation of temporal data to match the client&#8217;s preferred locale through the use of the <code>Accept-Language</code> header in an incoming request. The value of this header can be an array of one or more language tags, such as en-US, along with a weightage indicator for the language.</p>



<p>This value is set automatically by the browser based on the regional settings of the operating system, and can be overridden by the user to suit their needs. The language tag may be followed by an optional quality factor parameter that indicates the preferred weightage to the given language tag. The value of the q-factor is a decimal number between 0 to 1.</p>


<pre class="brush: plain; title: ; notranslate" title="">
en-US;q=1,en-GB;0.5
</pre>


<p>The above example indicates that the client prefers American as well as British English, with a higher preference for American English.</p>



<p>An example of an entire <code>Accept-Language</code> header is shown below.</p>


<pre class="brush: plain; title: ; notranslate" title="">
Accept-Language: en, en-GB;q=0.8, hi;q=0.7
</pre>


<p>This is equivalent to having the value <code>en;q=1,en-GB;q=0.8,hi;q=0.7</code>.</p>



<h4>Server-side Extraction</h4>



<p>On the server side, the framework parses the header and automatically populates the <code>UserLanguages</code> property of the request object. The type of <code>UserLanguages</code> is <code>string[]</code>, and its entries are sorted in descending order by the quality factor. In the example above, the language tag en is the first entry, and hi is the last entry.</p>



<p>Once the request language has been determined, the method checks if it is whitelisted in the allowedLanguages parameter. It first checks if the entire language tag and its subtag are present in the whitelist, or failing that, if the language tag alone is found. That way, if the application only supports French language localisation, but the request contains the tag fr-CA, the response is still localised to the French language, even though it does not contain Canadian region-specific date or number formatting.</p>



<p>In spite of all this, if the method is unable to determine the preferred language from the request, it applies the culture that is currently active on the operating system.</p>



<h4>Request Handling</h4>



<p>The server matches the current culture of the thread fulfilling the request to a value from this array in order to process the request in a culture-aware manner. Currently this extends to temporal data, with scope for future support for UI string localisation, formatting of numerical data, units of measurement and iconography.</p>



<p>The code to configure this for the current thread is written in an extension method on the <code>System.Web.HttpApplication</code> class.</p>


<pre class="brush: plain; title: ; notranslate" title="">
void SetLocale(this HttpApplication application, 
    string culture = null, 
    string uiCulture = null, 
    bool setUiCulture = true, 
    string allowedLocales = null)
</pre>


<p>This method is invoked from the <code>Application_BeginRequest</code> event handler, because the locale has to be set separately for each request. The <code>SetLocale</code> method is called directly from this event handler. The method is invoked without any parameters, which indicates that the preferred locale has to be inferred from the request headers.</p>



<p>If the <code>Accept-Language</code> header is not present in the request, the method falls back upon the regional settings configured on the server to handle the request.</p>



<p>The <code>Thread</code> class has two properties to set the culture.</p>



<ol><li>CurrentCulture, which determines the writing system (LTR or RTL), calendar, string sorting and formatting of date and time strings.</li><li>CurrentUICulture, which determines the resource file used by the Resource Manager to localise the strings, icons and other non-code assets for the application.</li></ol>



<p>This separation allows applications to be able to handle regional settings for data even if it does not support region-specific UI labels. The <code>SetLocale</code> method sets both properties to the same culture unless the value of <code>setUiCulture</code> is false.</p>
			</div><!-- .entry-content -->
	
	<footer class="entry-meta">
			<div class="entry-meta-date-links">
		<time class="date" datetime="2020-09-03T14:38:51+05:30">September 3, 2020</time>
				<span class="sep"> &#8226; </span>
		<span class="permalink"><a href="http://localhost:81/wp/valknut-localisation/" rel="bookmark">&#8734;</a></span>
			</div>

	
		
	</footer><!-- .entry-meta -->
</article><!-- #post-## -->

			
				
<article id="post-1584" class="post-1584 post type-post status-publish format-standard hentry category-construction category-software-engineering tag-asp-net-mvc tag-c tag-fitnet">
	<header class="entry-header">
		<h1 class="entry-title"><a href="http://localhost:81/wp/valknut-domain-model/" rel="bookmark">Valknut &#8211; Domain Model</a></h1>
	</header><!-- .entry-header -->

		<div class="entry-content">
		
<p>The application centres around log entries. Every time you train, you create a log entry. The log entry stores the time when the training session was started and completed. The log entry contains a collection of sets. A set consists of one or more repetitions of a single exercise at a uniform intensity.</p>



<p>All other entities in the domain model projects out from this central requirement.</p>



<p>A set consists of an exercise and repetitions. Exercises are categorised by muscle groups. Hence there are exercises and categories.</p>



<p>Sequences of sets are organised into a routine, which serve as a template for a training log.</p>



<ol><li>Categories – A list of body muscle groups, which is used to classify exercises.</li><li>Exercises – A list of body activities for improved strength, conditioning, agility or endurance.</li><li>Repetitions – The number of times a complete motion of an exercise has to be executed.</li><li>Sets – A group of continuous, consecutive repetitions of the same exercise.</li><li>Routines – A collection of several sets of one or more exercises, to be performed sequentially.</li><li>Training Logs – A record of the date, time and duration when a particular routine was performed.</li></ol>



<h3>Categories</h3>



<p>Categories muscle groups in the body. This list is static and has no user-interface elements to modify its contents. It is created when the database for the application is initially created, and remains unchanged throughout its lifetime. The full list of categories included in Valknut is given below.</p>



<ol><li>Abdominals</li><li>Abductors</li><li>Adductors</li><li>Biceps</li><li>Body</li><li>Calves</li><li>Chest</li><li>Forearms</li><li>Glutes</li><li>Hamstrings</li><li>Lats</li><li>Lower Back</li><li>Middle Back</li><li>Neck</li><li>Quadriceps</li><li>Shoulders</li><li>Traps</li><li>Triceps</li></ol>



<p>Some fitness-training literature uses the term category to describe the the primary goal of the exercise. These systems consist of strength, hypertrophy, endurance, flexibility, balance, agility, speed, power and accuracy. This aspect is (partially) fulfilled in Valknut by the exercise property called type.</p>



<h3>Exercises</h3>



<p>An exercise has a name, a category and a type. Categories and types have been explained above. New exercises can be created at any time, but to delete an exercise, its entries from the routines and log entries must be remove manually beforehand.</p>



<h3>Routines</h3>



<p>A routine is a sequence template. It describes the desired initial structure of a training session as a series of exercises to be performed, the number of sets for each exercise, the intensity of the set, and the number of repetitions to be performed. Weights and repetitions for each set can differ in order to create straight, pyramid or reverse-pyramid patterns.</p>



<h3>Training Log</h3>



<p>The training log is a memo of the name of the workout, the sequence, intensity and repetitions of its component exercises, the date and time when it was performed and the duration it took.</p>



<p>Routines serve as a template for a log entry. When a new entry is added to the training log, the sequence of exercises, the number of sets, the intensity of the exercise and the number of repetitions are copied from a previously created routine. But log entries do not retain any association with the routine. If the routine is modified after a log entry has been created, its modifications do not reflect on the log entry. Conversely, the sequence of exercises and sets in a log entry can be altered without affecting the routine from which it was created.</p>
			</div><!-- .entry-content -->
	
	<footer class="entry-meta">
			<div class="entry-meta-date-links">
		<time class="date" datetime="2020-09-03T13:39:00+05:30">September 3, 2020</time>
				<span class="sep"> &#8226; </span>
		<span class="permalink"><a href="http://localhost:81/wp/valknut-domain-model/" rel="bookmark">&#8734;</a></span>
			</div>

	
		
	</footer><!-- .entry-meta -->
</article><!-- #post-## -->

			
				
<article id="post-1582" class="post-1582 post type-post status-publish format-standard hentry category-construction category-software-engineering tag-asp-net-mvc tag-c tag-fitnet">
	<header class="entry-header">
		<h1 class="entry-title"><a href="http://localhost:81/wp/valknut-workout-tracking/" rel="bookmark">Valknut &#8211; Workout Tracking</a></h1>
	</header><!-- .entry-header -->

		<div class="entry-content">
		
<p>Valknut is a workout tracking application. It is designed to keep logs about any kind of weighlifting activity, such as barbell training, bodyweight training or dumbbell workouts.</p>



<p>The original motivation for this project was to serve as a personally tailored replacement to commercial offerings.</p>



<h3>History</h3>



<p>The initial product idea germinated in the year 2016 as a means to store personal health information safely on an individual desktop computer, away from prying eyes. To that end, the application never considered the possibility of multiple simultaneous users, authentication, or non-local persistence. Each individual user would store their own records in their personal file, which would be protected by the user&#8217;s own encryption key. The project was rather unimaginatively titled Fit Net.</p>



<p>After remaining shelved for a very long time, I picked it up again in 2020 to breathe some life back into it. Among other things, I changed it into a web application since that was a platform I knew well by then, and renamed it to a much more distinguished Valknut, invoking imagery of Norse mythology, Viking warriors and Valhalla.</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" width="520" height="200" src="http://localhost:81/wp/wp-content/uploads/2021/01/valknut-logos.png" alt="" class="wp-image-1609"/><figcaption>Does a workout even count if you don&#8217;t feel at the threshold of Valhalla by the time it&#8217;s complete?</figcaption></figure>



<h3>Project Status</h3>



<p>The product is in what I call functionally usable state. It provides all necessary features to capture, store, retrieve, edit and delete the most essential facets of a weightlifting regimen. A basic summary report has been implemented.</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" width="520" height="303" src="http://localhost:81/wp/wp-content/uploads/2021/01/screenshots-1.png" alt="" class="wp-image-1622"/></figure>



<p>The architecture of the application still aspires to be amended into a desktop-based product someday.</p>



<h3>Architecture</h3>



<p>Valknut follows classical MVC architecture. The application is separated into three projects for the user interface, the querying engine and the entity model classes. The website project contains classes that implement the web controller interfaces and the views. The querying engine provides repositories, data-error abstractions and query and filtering operations. The models project is a class library to implement the entities that make up the domain model.</p>



<p>The following links expand upon select architectural aspects of the product.</p>



<p><a href="http://localhost:81/wp/valknut-domain-model/" data-type="post" data-id="1584">Domain Model</a></p>



<p><a href="http://localhost:81/wp/valknut-localisation/" data-type="post" data-id="1586">Localisation</a></p>



<p><a href="http://localhost:81/wp/valknut-validation/" data-type="post" data-id="1590">Validation</a></p>



<p><a href="http://localhost:81/wp/valknut-view-models/" data-type="post" data-id="1594">View Models</a></p>



<p><a href="http://localhost:81/wp/valknut-json-serialization/" data-type="post" data-id="1597">JSON Handler</a></p>
			</div><!-- .entry-content -->
	
	<footer class="entry-meta">
			<div class="entry-meta-date-links">
		<time class="date" datetime="2020-09-02T12:35:00+05:30">September 2, 2020</time>
				<span class="sep"> &#8226; </span>
		<span class="permalink"><a href="http://localhost:81/wp/valknut-workout-tracking/" rel="bookmark">&#8734;</a></span>
			</div>

	
		
	</footer><!-- .entry-meta -->
</article><!-- #post-## -->

			
				
<article id="post-1006" class="post-1006 post type-post status-publish format-standard hentry category-demonstration tag-c tag-fitnet tag-wpf">
	<header class="entry-header">
		<h1 class="entry-title"><a href="http://localhost:81/wp/adding-some-life/" rel="bookmark">Adding Some Life</a></h1>
	</header><!-- .entry-header -->

		<div class="entry-content">
		<p>The previous installment in the Building FitNet series explained how to connect a view-model with a view, using a modular and extensible architecture. In this episode, I explain how interactivity can be added to the user interface.</p>
<p>The simplest interactive UI control is a button. You click on it, and it executes some action. Buttons in Windows Forms worked the same way. But WPF takes the button and turns the knob up to 11. Buttons in WPF can take on literally any appearance that you can dream of. Building the user interface using XAML is already so much better than using the Designer or literal code statements. Features such as data binding are added bonus and allow for more dynamism in the user interface. You can bind the appearance of a Button instance to a view-model that reacts to the state of the application and literally make things dance.</p>
<p>The change in architecture also extends to the use of the event handlers. The built-in System.Windows.Controls.Button class has a property called Command, which can be bound to the view-model of the instance. The Command property is of type System.Windows.Input.ICommand. Any class that implements this interface can be attached to this property.</p>
<p>This sounds a bit counterintuitive at first. Why have a special type, when a simple function can suffice?</p>
<p>And the answer is separation of concerns. A command decouples the object that invokes the command from the object that executes the command.</p>
<p>The ICommand interface also provides additional properties that make it easy to control the state of the button with a bit of additional code.</p>
<pre>public class RelayCommand : ICommand<br>{<br>&nbsp;&nbsp;&nbsp; public RelayCommand(Action execute, Func&lt;bool&gt; canExecute)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _execute = execute;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _canExecute = canExecute;<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; event EventHandler ICommand.CanExecuteChanged<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Event dispatched event when the state of the CanExecute property changes<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; …<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; bool ICommand.CanExecute(object parameter)<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return null == _canExecute ? true : _canExecute();<br>&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; void ICommand.Execute(object parameter)<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _execute();<br>&nbsp;&nbsp;&nbsp;&nbsp; }<br>}</pre>
<p>The Command property of the button is assigned an instance of RelayCommand. This class constructor takes two parameters – an Action delegate called execute and a Func&lt;bool&gt; delegate called canExecute. The Action is called when the command is to be executed, whereas the Func&lt;bool&gt; determines if the command can be executed at all or not.</p>
<p>This is useful for performing runtime checks on the validity of input. The CanExecute delegate is triggered automatically by the framework periodically, which keeps the state of the button updated at all times.</p>
<p>The Command object should be made available through the view-model so that the button can be bound to it.</p>
<pre>public class CalculatorViewModel<br>{<br>&nbsp;&nbsp;&nbsp; public CalculatorViewModel()<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TryCalculateCommand = new RelayCommand(TryCalcuate, CanTryCalculate);<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; public ICommand TryCalculateCommand<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private set;<br>&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; private void TryCalcuate()<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; private bool CanTryCalculate()<br>&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Validate the input fields and return a boolean<br>&nbsp;&nbsp;&nbsp;&nbsp; }<br>}</pre>
<p>That’s it! All that’s left is to bind the Command property of the Button instance to the TryCalculateCommand property in the view-model.</p>
<pre>&lt;Button Content="Calculate" Command="{Binding TryCalculateCommand}"/&gt;</pre>
<p>Collectively, these minor improvements in paradigm make WPF a much nicer framework to use over its predecessors.</p>
			</div><!-- .entry-content -->
	
	<footer class="entry-meta">
			<div class="entry-meta-date-links">
		<time class="date" datetime="2016-12-22T06:41:00+05:30">December 22, 2016</time>
				<span class="sep"> &#8226; </span>
		<span class="permalink"><a href="http://localhost:81/wp/adding-some-life/" rel="bookmark">&#8734;</a></span>
			</div>

	
		
	</footer><!-- .entry-meta -->
</article><!-- #post-## -->

			
				
<article id="post-994" class="post-994 post type-post status-publish format-standard hentry category-demonstration tag-c tag-fitnet tag-wpf">
	<header class="entry-header">
		<h1 class="entry-title"><a href="http://localhost:81/wp/in-with-the-new/" rel="bookmark">In With the New</a></h1>
	</header><!-- .entry-header -->

		<div class="entry-content">
		<p>It turns out that there is a much better way to manipulate the user interface in WPF which is based on view-models. I cover this aspect in this episode of Building FitNet.</p>
<p>The System.Windows.Application class is the core of a WPF program. An instance of this class remains in memory for as long as the application is running. In order for the application to do something useful, programmers must extend this class and customise its behaviour to the needs of their own application. By convention, the primary application window is also instantiated by this class in the OnStartup event handler.</p>
<pre>private ShellViewModel _shellViewModel;

override public void OnStartup(StartupEventArgs e)
{
  base.OnStartup(e);
  _shellViewModel = new ShellViewModel();

  var window = new Shell();
  window.DataContext = _shellViewModel;
  window.Show();
}</pre>
<p>An instance of the ShellViewModel class is assigned as the view-model for the application window through its DataContext property. When the properties in the view-model instance change, it dispatches a PropertyChanged event along with the name of the changed property. Corresponding event handlers in the window object then query the view-model for the new state and update the appearance of the display. The ShellViewModel class must implement the System.ComponentModel.INotifyPropertyChanged interface for this behaviour.</p>
<p>The following example illustrates this by changing the title of the application window.</p>
<pre>public class ShellViewModel
{
  …
  public string Title
  {
   get
   {
     return _title;
   }

   set
   {
      _title = value;
     var e = new PropertyChangedEventArgs(“Title”);
     PropertyChanged(this, e);
    }
  }
}</pre>
<p>Specific properties of the view are bound to their corresponding counterparts in the view-model. In this example, the Title property of the Window class is bound to its namesake in the view-model.</p>
<pre>&lt;Window … Title=”{Binding Path=Title}&gt;
  …
&lt;/Window&gt;</pre>
<p>Therefore, when the title changes on the view-model, the change gets reflected on the view. The key here is assigning an instance of the ShellViewModel to the DataContext property, which establishes the bindings between the view and the view-model.</p>
<p>This concept is key to understanding and implementing properly architected WPF applications.</p>
<h4>Binding On-Screen Views</h4>
<p>This concept of binding a view to data can be extended to any type. Primitive types are rendered as strings. For complex types, programmers can build composite views made up of several different fundamental UI elements such as labels, text fields and buttons. Properties in the view-model are bound to these controls.</p>
<p>In order to render the content in the window, the application must instantiate ContentControl, which is shipped along with WPF. This class has a property called Content, which can be bound to any property in the view-model.</p>
<pre>&lt;ContentControl Content="{Binding Title}"/&gt;</pre>
<p>The output of the program written so far is shown below.</p>
<p><img loading="lazy" class="aligncenter size-full wp-image-996" src="http://www.notadesigner.com/wp-content/uploads/2018/01/view.binding.demonstration.png" alt="A string binding between a view-model and a view" width="656" height="438" /></p>
<p>When the value of Title in the view-model changes, the text rendered inside the ContentControl instance is updated to reflect the new text.</p>
<h4>Building Compound User Interfaces</h4>
<p>The third part of the equation is assigning a data template to the view, which describes the visual structure of an object. A data template is a window resource.</p>
<pre>&lt;Window…&gt;
  &lt;Window.Resources&gt;
    &lt;DataTemplate DataType=”{Type system:String}”&gt;
      &lt;TextBlock Text=”{Binding StringFormat={}The application name is &amp;#x2014; {0}}”/&gt;
    &lt;DataTemplate&gt;
  &lt;/Window.Resources&gt;
  …
&lt;/Window&gt;</pre>
<p>This modifies the appearance of the ContentControl instance. Instead of rendering plain text with just the name of the application, the output is decorated with some additional text and special characters, and looks like this.</p>
<p><img loading="lazy" class="aligncenter size-full wp-image-997" src="http://www.notadesigner.com/wp-content/uploads/2018/01/view.binding.demonstration-02.png" alt="An annotated string binding between a view-model and a view" width="656" height="438" /></p>
<h3>The Big Picture</h3>
<p>Essentially, the outcome of what appears on the screen is now split into three classes – a view-model, a view, and a data template that specifies which determines which view to use to render a view-model.</p>
<p>It’s a small step from here to building complete user interfaces using this style of programming.</p>
<p>This is done by having a custom view-model class for the window as shown above, then adding another view-model to it as a public, bindable property called SelectedView.</p>
<pre>public class ShellViewModel
{
  …
  private Object _selectedView;

  public Object SelectedView
  {
    get
    {
      return _selectedView;
    }

    set
    {
      if (value == _selectedView)
      {
        return;
      }

      _selectedView = value;
      OnPropertyChanged(nameof(SelectedView));
    }
  }
}</pre>
<p>It is preferred that SelectedView be a custom type instead of System.Object. A different view-model is required for each view that the application needs to render. For example, if the application requires tabs for a calories consumed calculator and a speed calculator, then two view-models must be made for each of these tabs. Having a common base class between them ensures type-safety when switching between the two view-models.</p>
<p>A custom renderer is also required for each view. Renderers are typically built on top of the UserControl class. The declarative syntax of XAML makes it very easy to build a user interface with any kind of layout.</p>
<p>The example below shows a SpeedCalculatorView that computes the value of speed based on the time taken and distance covered.</p>
<pre>&lt;UserControl …&gt;
  &lt;Grid&gt;
    &lt;Grid.ColumnDefinitions&gt;
      &lt;ColumnDefinition Width="150"/&gt;
      &lt;ColumnDefinition Width="250"/&gt;
    &lt;/Grid.ColumnDefinitions&gt;

    &lt;Grid.RowDefinitions&gt;
      &lt;RowDefinition Height="Auto"/&gt;
      &lt;RowDefinition Height="Auto"/&gt;
      &lt;RowDefinition Height="Auto"/&gt;
    &lt;/Grid.RowDefinitions&gt;
    &lt;TextBlock Grid.Column="0" Grid.Row="0" Text="Time"/&gt;
    &lt;TextBlock Grid.Column="0" Grid.Row="1" Text="Distance"/&gt;
    &lt;TextBlock Grid.Column="0" Grid.Row="2" Text="Speed"/&gt;

    &lt;TextBox Grid.Column="1" Grid.Row="0" Text="{Binding Time}"/&gt;
    &lt;TextBox Grid.Column="1" Grid.Row="1" Text="{Binding Distance}"/&gt;
    &lt;TextBox Grid.Column="1" Grid.Row="2" Text="{Binding Speed}"/&gt;
  &lt;/Grid&gt;
&lt;/UserControl&gt;</pre>
<p>The window resources contains a DataTemplate declaration to associate the SpeedCalculatorView with the SpeedCalculatorViewModel. The user interface is changed by setting the value of SelectedView in ShellViewModel to an instance of SpeedCalculatorViewModel.</p>
<p>In the next part, I will cover how to add interactivity to this application.</p>
			</div><!-- .entry-content -->
	
	<footer class="entry-meta">
			<div class="entry-meta-date-links">
		<time class="date" datetime="2016-12-15T05:59:00+05:30">December 15, 2016</time>
				<span class="sep"> &#8226; </span>
		<span class="permalink"><a href="http://localhost:81/wp/in-with-the-new/" rel="bookmark">&#8734;</a></span>
			</div>

	
		
	</footer><!-- .entry-meta -->
</article><!-- #post-## -->

			
				
<article id="post-986" class="post-986 post type-post status-publish format-standard hentry category-demonstration tag-c tag-fitnet tag-wpf">
	<header class="entry-header">
		<h1 class="entry-title"><a href="http://localhost:81/wp/out-with-the-old/" rel="bookmark">Out With the Old</a></h1>
	</header><!-- .entry-header -->

		<div class="entry-content">
		<p>In the previous post I described the rationale and the approach to building a custom fitness tracker for the desktop. The application was to be built using the Windows Presentation Foundation. As far as execution goes, I had a lot to learn about the correct way to use WPF. The first commit of the application followed so many WinForms paradigms that it made zero sense to involve the overhead of WPF.</p>
<p><img style="display: inline; background-image: none;" title="FitNet Desktop screenshot" src="http://www.notadesigner.com/wp-content/uploads/2018/01/fitnet.desktop.png" alt="FitNet Desktop screenshot" border="0" /></p>
<p>This is what the XAML that implements the above screen looked like.</p>
<pre>&lt;TabControl&gt;
     &lt;TabItem Header="Summary"&gt;
         &lt;fit:Summary/&gt;
     &lt;/TabItem&gt;
     &lt;TabItem Header="Reports"&gt;
         &lt;Label&gt;Reports View&lt;/Label&gt;
     &lt;/TabItem&gt;
     &lt;TabItem Header="Tracking"&gt;
         &lt;Label&gt;Tracking View&lt;/Label&gt;
     &lt;/TabItem&gt;
&lt;/TabControl&gt;</pre>
<p>Perfectly readable, but it would quickly devolve either into a big ball of mud with XML nodes nested several layers deep in a single file, or turn into a pile of nested classes inheriting unrelated behaviour from a few common base classes. Either case was unacceptable. But I didn&#8217;t know that yet.</p>
<p>The second mistake was borrowing a data-access implementation from a previous project which was based on a primitive architecture. The template pattern that this layer implemented was fine for a small number of data objects. But it becomes tedious to build a separate reader and writer sub-class and its associated ancillary classes for every aggregate data type (and FitNet requires quite a few of those). I needed something that was easier to extend when it came to data access.</p>
<p><img loading="lazy" class="size-full wp-image-990 aligncenter" src="http://www.notadesigner.com/wp-content/uploads/2018/01/fitnet.desktop-01-solution.png" alt="FitNet Desktop Solution View" width="371" height="561" /></p>
<p>The third major flaw was having monolithic namespaces out of ignorance of the WPF architectural style, and not using its paradigms to the best benefit. This resulted in the application turning into three projects &#8211; a Desktop project as the primary executable, a Desktop.Lib library project as a massive collection of view classes, and a Persistence project which implemented the aforementioned half-functioning data access layer.</p>
<p>I went through this path for several weeks before finally realising my folly, by which time I had actually built quite a bit of useful functionality in the application. But it was getting unwieldy to make any modifications or add new functionality. It seemed like I was constantly fighting against the framework in order to get things done.</p>
<p>I had finally had enough of this struggle when I had to implement a flyout for modifying the list of exercises in the database. Adding yet another node to the already crowded main window file and more inline click event handlers in the backing CS file were a clear indicator that I was doing this wrong. There was no way this could scale up elegantly.</p>
<p>This is where I decided to take a step back and try to understand what the heck was going on.</p>
<p>Fortunately I stumbled upon XPence, an expense tracking application built on WPF by Siddhartha S. and hosted with an in-depth development tutorial on Code Project.</p>
<p>Hang on for the next part where I finally begin to turn this ship around to a more meaningful course.</p>
			</div><!-- .entry-content -->
	
	<footer class="entry-meta">
			<div class="entry-meta-date-links">
		<time class="date" datetime="2016-12-08T20:13:00+05:30">December 8, 2016</time>
				<span class="sep"> &#8226; </span>
		<span class="permalink"><a href="http://localhost:81/wp/out-with-the-old/" rel="bookmark">&#8734;</a></span>
			</div>

	
		
	</footer><!-- .entry-meta -->
</article><!-- #post-## -->

			
				
<article id="post-977" class="post-977 post type-post status-publish format-standard hentry category-demonstration tag-c tag-fitnet tag-wpf">
	<header class="entry-header">
		<h1 class="entry-title"><a href="http://localhost:81/wp/introducing-fitnet/" rel="bookmark">Introducing FitNet</a></h1>
	</header><!-- .entry-header -->

		<div class="entry-content">
		<p>The recent surge in fitness-related technology innovations bodes well for the future of many people. And though the Cheeto-munching, Red Bull-guzzling stereotype for the technologists behind this progress still sticks, the truth is that more people, including programmers, are gaining awareness of their physical health and nutrition and changing lifestyles to seek improvement.</p>
<p>Latching on to this bandwagon came a surge of fitness tracking apps. FitNotes, StrongLifts 5&#215;5, the Starting Strength App by legendary strength-training coach Mark Rippetoe, Strong App for iOS, and many more, provide ample choice to the enthusiast as well as advanced lifter. These apps cover various aspects, from simple tracking, to full blown programme design with progressions and periodisation. Some applications work online. Your data is stored on their server, and requires an internet connection to access and update. Others are offline, or a hybrid of both modes. Many are free and use ad revenue to sustain operations. Some of the fancier ones are paid. They all have their pros and cons.</p>
<p>Having used a small subset of them in the past few years, I have identified certain shortcomings between them.</p>
<h4>Incompatible Storage</h4>
<p>This is especially annoying because most of these applications use the same database engine &#8211; SQLite. But it&#8217;s impossible to move from one application to another without a lot of manual re-entry of data.</p>
<p>Now this is an understandable shortcoming. Database design is an engineering activity. People approach the same problem differently based on their skill levels and priorities. Copying databases between applications will never work directly. But the problem can be mitigated to a great extent by the industry agreeing to a common minimum format that they all support, which can be used to send data out of the application. Customers do not like being locked in.</p>
<h4>Changing Platforms</h4>
<p>Mobile phones change often. I have found myself switching between Blackberry to Android to iOS in a few short years. Fitness journeys last a lifetime. Phones last a few years, at best.</p>
<p>This is to some extent, a manifestation of point 1 above. If the common minimum format were to come together, changing platforms would become much easier. However, there&#8217;s another more subtle point. The one unchanged platform over all these years has been the desktop and the Windows operating system. People usually have access to at least one Windows computer. Even though Android has become the most popular operating system, the Windows desktop remains firmly lodged into place at workplaces, schools and homes. It&#8217;s still a very stable and dependable platform to target.</p>
<h4>Privacy</h4>
<p>It is possible to cast all these troubles away and switch to a web-based application. However, people are not always comfortable with storing sensitive personal information on a server that is not in their control. Not to mention the risk of the company going belly-up and taking their precious PR logs along with it.</p>
<p>This is a no-brainer. Put the data on the user&#8217;s own computer, where they do not have to worry about losing their privacy. Include an automated backup feature that saves the encrypted data on their cloud-storage service. The data remains reasonably safe from loss as well as from prying eyes. Again, a common minimum format can prove to be very useful in the worst case scenario of 100% loss of the physical computer itself.</p>
<p>These were real and personal pain-points I experienced first-hand. And being a programmer gave me the ability to actually work on a solution that addresses these problems.</p>
<h3>Introducing FitNet</h3>
<p>The easiest replacement to these woes was a spreadsheet. Smack a new row for every workout, see real-time graph updates. It works as a log, but getting a report out of it is a chore. Besides, programming fancy reports into a spreadsheet eventually turns it into a prime feature for The Daily WTF. So that was out. Microsoft Access used to be a very good tool for this kind of tasks, but it still leaves out graphical reports. And the new monthly subscription model for Office 365 just isn&#8217;t for me.</p>
<h4>Enter Windows Presentation Foundation.</h4>
<p>I have been using Windows Forms since the longest time as the tool of choice for building desktop applications on Windows. It&#8217;s easy and it&#8217;s straightforward, and anybody who&#8217;s working with the previous Windows API feels perfectly at home with the new managed API that WinForms represents.</p>
<p>Windows Presentation Foundation is different. It is not just a wrapper around the Windows API. It&#8217;s a whole different framework which eschews the disparate development sub-frameworks from the Windows API in favour of a single well-integrated and extensible library. It also accounts for differing device capabilities in a more resilient fashion by abstracting away tasks like drawing objects relative to the device resolution and hardware accelerated graphics available out of the box without any extra effort. Finally, WPF brings a new type of resource &#8211; a XAML file &#8211; to be used as a declarative approach to building and programming user-interface elements rather than the procedural approach required by the Windows API.</p>
<p>This means that the following 50 lines of code…</p>
<pre>WNDCLASSEX wc;
HWND hwnd;
MSG Msg;

// Registering the Window Class
wc.cbSize        = sizeof(WNDCLASSEX);
wc.style         = 0;
wc.lpfnWndProc   = WndProc;
wc.cbClsExtra    = 0;
wc.cbWndExtra    = 0;
wc.hInstance     = hInstance;
wc.hIcon         = LoadIcon(NULL, IDI_APPLICATION);
wc.hCursor       = LoadCursor(NULL, IDC_ARROW);
wc.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
wc.lpszMenuName  = NULL;
wc.lpszClassName = g_szClassName;
wc.hIconSm       = LoadIcon(NULL, IDI_APPLICATION);

if (!RegisterClassEx(&amp;wc))
{
MessageBox(NULL, "Window Registration Failed!", "Error!",
MB_ICONEXCLAMATION | MB_OK);
return 0;
}

// Create the window
hwnd = CreateWindowEx(
WS_EX_CLIENTEDGE,
g_szClassName,
"FitNet Desktop",
WS_OVERLAPPEDWINDOW,
CW_USEDEFAULT, CW_USEDEFAULT, 400, 300,
NULL, NULL, hInstance, NULL);

if (NULL == hwnd)
{
MessageBox(NULL, "Could not create application window.", "Error", MB_ICONEXCLAMATION | MB_OK);

return 0;
}

ShowWindow(hwnd, nCmdShow);
UpdateWindow(hwnd);

// Message loop
while(GetMessage(&amp;Msg, NULL, 0, 0) &gt; 0)
{
TranslateMessage(&amp;Msg);
DispatchMessage(&amp;Msg);
}
return Msg.wParam;</pre>
<p>…can be distilled down to…</p>
<pre>&lt;Window x:Class="WpfApplication1.Window1"
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
Title="FitNet Desktop" Height="400" Width="300" /&gt;</pre>
<p>Now it can be argued that the Windows Forms API also offers similar succinctness. But WPF takes this to a whole different level as I learned through the course of my project.</p>
<p>This series of articles is an ongoing log of my journey of building FitNet &#8211; a fitness tracker that meets my own needs.</p>
			</div><!-- .entry-content -->
	
	<footer class="entry-meta">
			<div class="entry-meta-date-links">
		<time class="date" datetime="2016-12-01T19:56:42+05:30">December 1, 2016</time>
				<span class="sep"> &#8226; </span>
		<span class="permalink"><a href="http://localhost:81/wp/introducing-fitnet/" rel="bookmark">&#8734;</a></span>
			</div>

	
		
	</footer><!-- .entry-meta -->
</article><!-- #post-## -->

			
			
		
		</div><!-- #content -->
	</section><!-- #primary -->


<div id="secondary" class="widget-area footer-widget-area" role="complementary">
		<div class="first footer-widgets">
		<aside id="text-3" class="widget widget_text">			<div class="textwidget"><p><strong><em>Previously on this Channel</em></strong></p>
</div>
		</aside><aside id="nav_menu-3" class="widget widget_nav_menu"><h3 class="widget-title">Favourites</h3><div class="menu-favourites-foundation-container"><ul id="menu-favourites-foundation" class="menu"><li id="menu-item-1221" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1221"><a href="http://localhost:81/wp/on-reading-for-programmers/">On Reading for Programmers</a></li>
<li id="menu-item-1222" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1222"><a href="http://localhost:81/wp/programming-beyond-9-to-5/">Programming Beyond 9 to 5</a></li>
<li id="menu-item-1223" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1223"><a href="http://localhost:81/wp/whats-in-a-name/">What&#8217;s in a Name?</a></li>
<li id="menu-item-1220" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1220"><a href="http://localhost:81/wp/nothing-is-so-simple-that-it-cannot-be-difficult/">Nothing Is So Simple That it Cannot Be Difficult</a></li>
<li id="menu-item-1216" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1216"><a href="http://localhost:81/wp/a-guide-to-effective-version-control/">A Guide to Effective Version Control</a></li>
</ul></div></aside><aside id="nav_menu-5" class="widget widget_nav_menu"><div class="menu-favourites-demonstration-container"><ul id="menu-favourites-demonstration" class="menu"><li id="menu-item-1225" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1225"><a href="http://localhost:81/wp/reading-time-on-a-binary-clock/">Reading Time on a Binary Clock</a></li>
<li id="menu-item-1224" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1224"><a href="http://localhost:81/wp/a-binary-clock-using-c/">A Binary Clock using C#</a></li>
<li id="menu-item-1226" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1226"><a href="http://localhost:81/wp/creating-an-underwater-effect-in-actionscript/">Creating an Underwater Effect in ActionScript</a></li>
<li id="menu-item-1227" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1227"><a href="http://localhost:81/wp/breaking-free-from-your-api/">Breaking Free from Your API</a></li>
</ul></div></aside><aside id="nav_menu-7" class="widget widget_nav_menu"><div class="menu-favourites-technique-container"><ul id="menu-favourites-technique" class="menu"><li id="menu-item-1230" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1230"><a href="http://localhost:81/wp/how-to-write-unmaintainable-code-php-redux/">How to Write Unmaintainable Code – PHP Redux</a></li>
<li id="menu-item-1229" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1229"><a href="http://localhost:81/wp/how-to-write-unmaintainable-code-asp-net-redux/">How to Write Unmaintainable Code – ASP.NET Redux</a></li>
<li id="menu-item-1231" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1231"><a href="http://localhost:81/wp/a-message-in-a-socket-interprocess-communications-by-example/">A Message in a Socket – Interprocess Communications by Example</a></li>
<li id="menu-item-1232" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1232"><a href="http://localhost:81/wp/socket-talk-interprocess-communications-by-example/">Socket Talk – Interprocess Communications by Example</a></li>
<li id="menu-item-1233" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1233"><a href="http://localhost:81/wp/reifying-your-commands-interprocess-communications-by-example/">Reifying Your Commands – Interprocess Communications by Example</a></li>
</ul></div></aside>	</div>
	
		<div class="second footer-widgets">
		<aside id="text-9" class="widget widget_text"><h3 class="widget-title">&nbsp;</h3>			<div class="textwidget"></div>
		</aside><aside id="nav_menu-19" class="widget widget_nav_menu"><h3 class="widget-title">Entity Framework Basics</h3><div class="menu-basics-of-entity-framework-container"><ul id="menu-basics-of-entity-framework" class="menu"><li id="menu-item-1092" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1092"><a href="http://localhost:81/wp/introduction-to-orm-entity-framework/">Introduction to ORM &#038; Entity Framework</a></li>
<li id="menu-item-1091" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1091"><a href="http://localhost:81/wp/components-of-entity-framework/">Components of Entity Framework</a></li>
<li id="menu-item-1090" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1090"><a href="http://localhost:81/wp/operating-entity-framework/">Operating Entity Framework</a></li>
<li id="menu-item-1089" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1089"><a href="http://localhost:81/wp/the-database-context/">The Database Context</a></li>
<li id="menu-item-1088" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1088"><a href="http://localhost:81/wp/domain-entities/">Domain Entities</a></li>
</ul></div></aside><aside id="nav_menu-20" class="widget widget_nav_menu"><h3 class="widget-title">Code First</h3><div class="menu-entity-framework-code-first-container"><ul id="menu-entity-framework-code-first" class="menu"><li id="menu-item-1096" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1096"><a href="http://localhost:81/wp/laying-the-groundwork/">Laying the Groundwork</a></li>
<li id="menu-item-1110" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1110"><a href="http://localhost:81/wp/the-content-data-context/">The Content Data Context</a></li>
<li id="menu-item-1100" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1100"><a>Accessing the Data</a></li>
<li id="menu-item-1101" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1101"><a>Rethinking the Data Model</a></li>
</ul></div></aside><aside id="nav_menu-21" class="widget widget_nav_menu"><h3 class="widget-title">Database First</h3><div class="menu-entity-framework-database-first-container"><ul id="menu-entity-framework-database-first" class="menu"><li id="menu-item-1098" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1098"><a>Coming Soon!</a></li>
</ul></div></aside>	</div>
	
		<div class="third footer-widgets">
		<aside id="text-11" class="widget widget_text"><h3 class="widget-title">&nbsp;</h3>			<div class="textwidget"></div>
		</aside><aside id="nav_menu-23" class="widget widget_nav_menu"><h3 class="widget-title">Practical Design Patterns in C#</h3><div class="menu-practical-design-patterns-creational-container"><ul id="menu-practical-design-patterns-creational" class="menu"><li id="menu-item-1334" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1334"><a href="http://localhost:81/wp/practical-design-patterns-in-c-factory-method/">Factory Method</a></li>
<li id="menu-item-1333" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1333"><a href="http://localhost:81/wp/practical-design-patterns-in-c-abstract-factory/">Abstract Factory</a></li>
<li id="menu-item-1332" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1332"><a href="http://localhost:81/wp/practical-design-patterns-in-c-builder/">Builder</a></li>
<li id="menu-item-1370" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1370"><a href="http://localhost:81/wp/practical-design-patterns-in-c-prototype/">Prototype</a></li>
<li id="menu-item-1436" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1436"><a href="http://localhost:81/wp/practical-design-patterns-in-c-singleton/">Singleton</a></li>
</ul></div></aside><aside id="tag_cloud-14" class="widget widget_tag_cloud"><h3 class="widget-title">Tags</h3><div class="tagcloud"><a href="http://localhost:81/wp/tag/abstract-factory/" class="tag-cloud-link tag-link-56 tag-link-position-1" style="font-size: 8pt;" aria-label="abstract-factory (1 item)">abstract-factory</a>
<a href="http://localhost:81/wp/tag/actionscript/" class="tag-cloud-link tag-link-28 tag-link-position-2" style="font-size: 16.878048780488pt;" aria-label="actionscript (11 items)">actionscript</a>
<a href="http://localhost:81/wp/tag/actionscript-native-extensions/" class="tag-cloud-link tag-link-33 tag-link-position-3" style="font-size: 8pt;" aria-label="actionscript native-extensions (1 item)">actionscript native-extensions</a>
<a href="http://localhost:81/wp/tag/apache/" class="tag-cloud-link tag-link-44 tag-link-position-4" style="font-size: 8pt;" aria-label="apache (1 item)">apache</a>
<a href="http://localhost:81/wp/tag/asp-net/" class="tag-cloud-link tag-link-48 tag-link-position-5" style="font-size: 15.967479674797pt;" aria-label="asp.net (9 items)">asp.net</a>
<a href="http://localhost:81/wp/tag/asp-net-mvc/" class="tag-cloud-link tag-link-67 tag-link-position-6" style="font-size: 14.260162601626pt;" aria-label="asp.net mvc (6 items)">asp.net mvc</a>
<a href="http://localhost:81/wp/tag/bit-hacking/" class="tag-cloud-link tag-link-18 tag-link-position-7" style="font-size: 10.048780487805pt;" aria-label="bit-hacking (2 items)">bit-hacking</a>
<a href="http://localhost:81/wp/tag/builder/" class="tag-cloud-link tag-link-59 tag-link-position-8" style="font-size: 8pt;" aria-label="builder (1 item)">builder</a>
<a href="http://localhost:81/wp/tag/c/" class="tag-cloud-link tag-link-19 tag-link-position-9" style="font-size: 22pt;" aria-label="c# (33 items)">c#</a>
<a href="http://localhost:81/wp/tag/c-lang/" class="tag-cloud-link tag-link-42 tag-link-position-10" style="font-size: 8pt;" aria-label="c-lang (1 item)">c-lang</a>
<a href="http://localhost:81/wp/tag/coding-horror/" class="tag-cloud-link tag-link-31 tag-link-position-11" style="font-size: 10.048780487805pt;" aria-label="coding-horror (2 items)">coding-horror</a>
<a href="http://localhost:81/wp/tag/entity-framework/" class="tag-cloud-link tag-link-51 tag-link-position-12" style="font-size: 14.829268292683pt;" aria-label="entity-framework (7 items)">entity-framework</a>
<a href="http://localhost:81/wp/tag/factory-method/" class="tag-cloud-link tag-link-60 tag-link-position-13" style="font-size: 8pt;" aria-label="factory-method (1 item)">factory-method</a>
<a href="http://localhost:81/wp/tag/fitnet/" class="tag-cloud-link tag-link-46 tag-link-position-14" style="font-size: 16.422764227642pt;" aria-label="fitnet (10 items)">fitnet</a>
<a href="http://localhost:81/wp/tag/language-primer/" class="tag-cloud-link tag-link-17 tag-link-position-15" style="font-size: 8pt;" aria-label="language primer (1 item)">language primer</a>
<a href="http://localhost:81/wp/tag/learning/" class="tag-cloud-link tag-link-24 tag-link-position-16" style="font-size: 10.048780487805pt;" aria-label="learning (2 items)">learning</a>
<a href="http://localhost:81/wp/tag/memory-leaks/" class="tag-cloud-link tag-link-29 tag-link-position-17" style="font-size: 8pt;" aria-label="memory-leaks (1 item)">memory-leaks</a>
<a href="http://localhost:81/wp/tag/motorcycle-touring/" class="tag-cloud-link tag-link-9 tag-link-position-18" style="font-size: 15.967479674797pt;" aria-label="motorcycle-touring (9 items)">motorcycle-touring</a>
<a href="http://localhost:81/wp/tag/mysql/" class="tag-cloud-link tag-link-45 tag-link-position-19" style="font-size: 8pt;" aria-label="mysql (1 item)">mysql</a>
<a href="http://localhost:81/wp/tag/native-extensions/" class="tag-cloud-link tag-link-32 tag-link-position-20" style="font-size: 8pt;" aria-label="native-extensions (1 item)">native-extensions</a>
<a href="http://localhost:81/wp/tag/number-system/" class="tag-cloud-link tag-link-23 tag-link-position-21" style="font-size: 8pt;" aria-label="number system (1 item)">number system</a>
<a href="http://localhost:81/wp/tag/objective-c/" class="tag-cloud-link tag-link-15 tag-link-position-22" style="font-size: 8pt;" aria-label="objective-c (1 item)">objective-c</a>
<a href="http://localhost:81/wp/tag/optimisation/" class="tag-cloud-link tag-link-66 tag-link-position-23" style="font-size: 8pt;" aria-label="optimisation (1 item)">optimisation</a>
<a href="http://localhost:81/wp/tag/performance/" class="tag-cloud-link tag-link-65 tag-link-position-24" style="font-size: 8pt;" aria-label="performance (1 item)">performance</a>
<a href="http://localhost:81/wp/tag/php/" class="tag-cloud-link tag-link-25 tag-link-position-25" style="font-size: 11.414634146341pt;" aria-label="php (3 items)">php</a>
<a href="http://localhost:81/wp/tag/practical-design-patterns/" class="tag-cloud-link tag-link-49 tag-link-position-26" style="font-size: 14.260162601626pt;" aria-label="practical-design-patterns (6 items)">practical-design-patterns</a>
<a href="http://localhost:81/wp/tag/programming/" class="tag-cloud-link tag-link-16 tag-link-position-27" style="font-size: 11.414634146341pt;" aria-label="programming (3 items)">programming</a>
<a href="http://localhost:81/wp/tag/prototype/" class="tag-cloud-link tag-link-62 tag-link-position-28" style="font-size: 8pt;" aria-label="prototype (1 item)">prototype</a>
<a href="http://localhost:81/wp/tag/singleton/" class="tag-cloud-link tag-link-63 tag-link-position-29" style="font-size: 8pt;" aria-label="singleton (1 item)">singleton</a>
<a href="http://localhost:81/wp/tag/spreadsheet/" class="tag-cloud-link tag-link-27 tag-link-position-30" style="font-size: 8pt;" aria-label="spreadsheet (1 item)">spreadsheet</a>
<a href="http://localhost:81/wp/tag/sql/" class="tag-cloud-link tag-link-64 tag-link-position-31" style="font-size: 8pt;" aria-label="sql (1 item)">sql</a>
<a href="http://localhost:81/wp/tag/state/" class="tag-cloud-link tag-link-50 tag-link-position-32" style="font-size: 8pt;" aria-label="state (1 item)">state</a>
<a href="http://localhost:81/wp/tag/tour-of-hampi/" class="tag-cloud-link tag-link-8 tag-link-position-33" style="font-size: 15.967479674797pt;" aria-label="tour-of-hampi (9 items)">tour-of-hampi</a>
<a href="http://localhost:81/wp/tag/usability/" class="tag-cloud-link tag-link-21 tag-link-position-34" style="font-size: 8pt;" aria-label="usability (1 item)">usability</a>
<a href="http://localhost:81/wp/tag/user-interface/" class="tag-cloud-link tag-link-22 tag-link-position-35" style="font-size: 8pt;" aria-label="user interface (1 item)">user interface</a>
<a href="http://localhost:81/wp/tag/version-control/" class="tag-cloud-link tag-link-43 tag-link-position-36" style="font-size: 10.048780487805pt;" aria-label="version-control (2 items)">version-control</a>
<a href="http://localhost:81/wp/tag/wordpress/" class="tag-cloud-link tag-link-26 tag-link-position-37" style="font-size: 8pt;" aria-label="wordpress (1 item)">wordpress</a>
<a href="http://localhost:81/wp/tag/wpf/" class="tag-cloud-link tag-link-41 tag-link-position-38" style="font-size: 13.463414634146pt;" aria-label="wpf (5 items)">wpf</a></div>
</aside>	</div>
	</div><!-- #secondary -->

	</div><!-- #main -->

	<footer id="colophon" class="site-footer" role="contentinfo">
		<div class="site-info">
						<a href="http://wordpress.org/" title="A Semantic Personal Publishing Platform" rel="generator">Proudly powered by WordPress</a>
			<span class="sep">  &#8226; </span>
			Theme: Aldus by <a href="http://fklein.info/" rel="designer">Fr&#228;nk Klein</a>.		</div><!-- .site-info -->
	</footer><!-- #colophon -->
</div><!-- #page -->

<script type='text/javascript' src='http://localhost:81/wp/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9b' id='syntaxhighlighter-core-js'></script>
<script type='text/javascript' src='http://localhost:81/wp/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPlain.js?ver=3.0.9b' id='syntaxhighlighter-brush-plain-js'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://localhost:81/wp/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.head.appendChild( corecss );
		var themecssurl = "http://localhost:81/wp/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		document.head.appendChild( themecss );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['auto-links'] = false;
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['smart-tabs'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

	// Infinite scroll support
	if ( typeof( jQuery ) !== 'undefined' ) {
		jQuery( function( $ ) {
			$( document.body ).on( 'post-load', function() {
				SyntaxHighlighter.highlight();
			} );
		} );
	}
</script>
<script type='text/javascript' src='http://localhost:81/wp/wp-content/themes/aldus/js/navigation.js?ver=20130728' id='aldus-navigation-js'></script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-40138748-1', 'auto');
  ga('send', 'pageview');

</script>
</body>
</html>
